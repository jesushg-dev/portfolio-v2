// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model AppLanguage {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  code                     String                     @unique
  name                     String
  SkillTranslation         SkillTranslation[]
  ProjectTranslation       ProjectTranslation[]
  ServiceTranslation       ServiceTranslation[]
  CertificationTranslation CertificationTranslation[]
}

model Project {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime             @default(now())
  image              String
  type               StackType
  githubUrl          String?
  websiteUrl         String?
  isPrivate          Boolean              @default(false)
  ProjectSkill       ProjectSkill[]
  ProjectTranslation ProjectTranslation[]
  CertificateProject CertificateProject[]
}

model ProjectSkill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  Skill     Skill    @relation(fields: [skillId], references: [id])
  Project   Project  @relation(fields: [projectId], references: [id])
  skillId   String   @db.ObjectId
  projectId String   @db.ObjectId
}

model ProjectTranslation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  title         String
  description   String
  language      AppLanguage @relation(fields: [appLanguageId], references: [id])
  Project       Project?    @relation(fields: [projectId], references: [id])
  appLanguageId String      @db.ObjectId
  projectId     String?     @db.ObjectId
}

model Service {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime             @default(now())
  image              String
  type               StackType
  ServiceTranslation ServiceTranslation[]
  CertificateService CertificateService[]
}

model ServiceTranslation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  title         String
  description   String
  language      AppLanguage @relation(fields: [appLanguageId], references: [id])
  Service       Service?    @relation(fields: [serviceId], references: [id])
  serviceId     String?     @db.ObjectId
  appLanguageId String      @db.ObjectId
}

model Skill {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime           @default(now())
  image            String
  title            String
  type             StackType
  ProjectSkill     ProjectSkill[]
  SkillTranslation SkillTranslation[]
  CertificateSkill CertificateSkill[]
}

model SkillTranslation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  description   String
  urlWiki       String
  language      AppLanguage @relation(fields: [appLanguageId], references: [id])
  Skill         Skill?      @relation(fields: [skillId], references: [id])
  skillId       String?     @db.ObjectId
  appLanguageId String      @db.ObjectId
}

model Certification {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime                   @default(now())
  company                  String
  issuedDate               Int?
  url                      String?
  idCredential             String?
  image                    String?
  type                     StackType[]
  CertificateSkill         CertificateSkill[]
  CertificationTranslation CertificationTranslation[]
  CertificateProject       CertificateProject[]
  CertificateService       CertificateService[]
}

model CertificationTranslation {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime             @default(now())
  title              String
  language           AppLanguage          @relation(fields: [appLanguageId], references: [id])
  Certification      Certification?       @relation(fields: [certificationId], references: [id])
  certificationId    String?              @db.ObjectId
  appLanguageId      String               @db.ObjectId
  CertificateService CertificateService[]
}

//an certificate can validate multiple skills
//an skill can be validated by multiple certificates
model CertificateSkill {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime      @default(now())
  Certification   Certification @relation(fields: [certificationId], references: [id])
  Skill           Skill         @relation(fields: [skillId], references: [id])
  certificationId String        @db.ObjectId
  skillId         String        @db.ObjectId
}

//an certificate can validate multiple projects
//an project can be validated by multiple certificates
model CertificateProject {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime      @default(now())
  Certification   Certification @relation(fields: [certificationId], references: [id])
  Project         Project       @relation(fields: [projectId], references: [id])
  certificationId String        @db.ObjectId
  projectId       String        @db.ObjectId
}

//an certificate can validate multiple services
//an service can be validated by multiple certificates
model CertificateService {
  id                         String                    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                  DateTime                  @default(now())
  Certification              Certification             @relation(fields: [certificationId], references: [id])
  Service                    Service                   @relation(fields: [serviceId], references: [id])
  certificationId            String                    @db.ObjectId
  serviceId                  String                    @db.ObjectId
  CertificationTranslation   CertificationTranslation? @relation(fields: [certificationTranslationId], references: [id])
  certificationTranslationId String?                   @db.ObjectId
}

enum StackType {
  FRONTEND
  BACKEND
  MOBILE
  DESKTOP
  CYBERSECURITY
  DEVOPS
  SOFTSKILLS
  TOOLS
}
